name: AWS Flight Server CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: jianpeng/flight-api
  ECS_CLUSTER: pengjian-flight-api-cluster
  ECS_SERVICE: pengjian-flight-api-service
  CONTAINER_NAME: flight-api-container
  IMAGE_TAG: latest  # 全局定义IMAGE_TAG
  JAR_FILE: target/*.jar

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-jar
          path: ${{ env.JAR_FILE }}
          retention-days: 1  # 只保留1天，节省存储空间

  docker-build-push:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: springboot-jar
          path: target

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # 使用全局定义的IMAGE_TAG，无需重复定义
        run: |
          # 调试输出
          echo "Building image with tag: $IMAGE_TAG"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: debug Image_URI
        run: |
          echo "IMAGE_URI: ${{ env.IMAGE_URI }}"
          echo "CONTAINER_NAME: ${{ env.CONTAINER_NAME }}"
          # 这些变量在deploy作业中未定义，不应使用
          # echo "ECR_REGISTRY: $ECR_REGISTRY"
          # echo "IMAGE_TAG: $IMAGE_TAG"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          # 使用正确设置的IMAGE_URI环境变量
          image: ${{ env.IMAGE_URI }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
